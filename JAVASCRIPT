.1 Explain Hoisting in JavaScript?
ANS=Hoisting in JavaScript refers to the behavior of moving variable and function declarations to the top of their respective scopes during the compilation phase, before the code is executed. This means that regardless of where declarations appear in the code, they are effectively "hoisted" to the top of their scope.
There are two aspects of hoisting in JavaScript:
Variable Hoisting: When variables are hoisted, only the declarations are moved to the top, not the initializations. This means that the variable names are known and accessible throughout their scope, even before they are assigned a value. However, if a variable is not explicitly assigned a value, it will have the value undefined until a value is assigned.
Function Hoisting: Function declarations are fully hoisted, meaning both the function name and the function body are moved to the top of their scope. This allows functions to be called before they are declared in the code.




Q.2 Explain Temporal Dead Zone?
ANS=The Temporal Dead Zone (TDZ) is a behavior that occurs with variables declared using let and const in JavaScript. It refers to the period between entering a scope (block or function) and the point at which a variable is declared. During this temporal dead zone, accessing the variable results in a ReferenceError.
To understand the Temporal Dead Zone, let's consider an example:
javascript
console.log(myVariable); // Throws ReferenceError
let myVariable = 10;
console.log(myVariable); // Output: 10
In the above code, myVariable is declared using let. The first console.log statement tries to access the variable before its declaration. However, instead of outputting undefined as with var variables, it throws a ReferenceError. This is because let variables are hoisted to the top of their scope as well, but they remain in the Temporal Dead Zone until their declaration is encountered.

The Temporal Dead Zone exists from the start of the scope until the actual declaration statement. Within this zone, any reference to the variable will result in a ReferenceError. Once the variable declaration is reached, the variable becomes accessible and can be assigned a value.
console.log(myVariable); // Throws ReferenceError
let myVariable;
console.log(myVariable); // Output: undefined
myVariable = 10;
console.log(myVariable); // Output: 10
In this modified example, we explicitly declare myVariable before the first console.log statement. Although the variable is hoisted, it is not assigned a value until later. The first console.log still throws a ReferenceError because it is accessing the variable during the Temporal Dead Zone. After the declaration, the second console.log outputs undefined, and the final console.log outputs 10 after assigning the value.
The Temporal Dead Zone serves as a mechanism to catch potential errors caused by accessing variables before their declaration. It encourages better programming practices by enforcing variable declaration before use, promoting code clarity and reducing the risk of accidental variable usage issues.




Q.3 Difference between var & let?
Variables declared by let have their scope in the block for which they are declared, as well as in any contained sub-blocks. In this way, let works very much like var. The main difference is that the scope of a var variable is the entire enclosing function:
The main difference between var and let in JavaScript lies in their scoping and hoisting behavior. Here are the key distinctions:

Scoping: Variables declared with var have function-level scope or global scope, while variables declared with let have block-level scope.




Q.4 What are the major features introduced in ECMAScript 6?
ANS==ECMAScript 6, also known as ECMAScript 2015 or ES6, introduced several significant features and improvements to the JavaScript language. Here are some of the major features introduced in ECMAScript 6:

1. Block-Scoped Declarations (`let` and `const`): ECMAScript 6 introduced block-scoped variable declarations using the `let` and `const` keywords. These variables have block-level scope, allowing for better control of variable visibility and avoiding issues with hoisting.

2. Arrow Functions: Arrow functions provide a more concise syntax for writing functions. They use the `=>` syntax and have a lexical `this` binding, making it easier to preserve the context of `this` within functions.

3. Classes: ECMAScript 6 introduced class syntax, providing a more straightforward and familiar way to define and create objects. Classes in ES6 follow the traditional object-oriented programming paradigm with constructor functions, inheritance, and method definitions.

4. Template Literals: Template literals allow for easier string interpolation and multiline strings by using backticks (\`...\`) instead of single or double quotes. They support embedded expressions using `${...}` within the string.

5. Destructuring Assignment: The destructuring assignment syntax allows developers to extract values from arrays or objects and assign them to variables using a concise syntax. It simplifies variable assignment and object/array manipulation.

6. Enhanced Object Literals: Object literals gained several enhancements in ES6, including shorthand property and method definitions, computed property names, and the ability to set prototypes using `__proto__`.

7. Modules: ECMAScript 6 introduced a standardized module system with support for importing and exporting code between files. Modules improve code organization, dependency management, and allow for better encapsulation of functionality.

8. Promises: Promises provide a cleaner and more readable way to handle asynchronous operations. They simplify working with callbacks, allowing developers to write asynchronous code that is easier to reason about 





Q.5 What is the difference between let and const ?
let: Variables declared with let can be reassigned to a new value. This means you can change the value of a let variable after it has been initialized.
const: Variables declared with const are constants and cannot be reassigned. Once a value is assigned to a const variable, it remains constant and cannot be changed.
let: Variables declared with let can be declared without an initial value and assigned 
const: Variables declared with const must be initialized with a value at the time of declaration. They cannot be declared without an initial value.
let allows for reassignable variables with block-level scope, while const declares constants that cannot be reassigned and also have block-level scope. The choice between let and const depends on whether you need a variable that can be reassigned or if you want to declare a constant value that should not be modifie





Q.6  What is template literals in ES6 and how do you use them?
Template literals, introduced in ECMAScript 6 (ES6), provide an enhanced syntax for creating strings in JavaScript. They allow for easy string interpolation, multiline strings, and the embedding of expressions within the string.
Template literals provide a concise and readable way to create strings in JavaScript, especially when involving dynamic content or multiline text. They enhance code maintainability and improve the readability of complex string constructions.




Q.7 Whatâ€™s difference between map & forEach?
map(): Use map() when you want to transform each element of an array and create a new array based on the results of the transformation. It is commonly used when you need to perform calculations or apply a specific operation to each element of an array.

forEach(): Use forEach() when you want to perform an action on each element of an array without creating a new array. It is useful for executing a function side effect, such as logging, updating variables, or making DOM manipulations.

In summary, the main difference between map() and forEach() lies in their return values and purposes. map() creates a new array based on the results of the callback function applied to each element, while forEach() iterates over the array and executes a provided function without creating a new array.




Q.8 How can you destructure objects and arrays in ES6?
n ECMAScript 6 (ES6), destructuring syntax allows you to extract values from arrays or properties from objects into individual variables. It provides a concise and convenient way to access and work with complex data structures. Here's how you can destructure objects and arrays in ES6:

Destructuring Objects:
To destructure an object, you use curly braces {} and provide the variable names that correspond to the object's properties. The variable names are matched with the property names of the object.





Q.9 How can you define default parameter values in ES6 functions?
In ECMAScript 6 (ES6), you can define default parameter values for function parameters. Default parameter values allow you to assign a default value to a parameter if no argument is provided or if the argument is undefined. Here's how you can define default parameter values in ES6 functions:

function greet(name = 'Anonymous') {
  console.log(`Hello, ${name}!`);
}

greet(); // Output: Hello, Anonymous!
greet('John'); // Output: Hello, John
n the above code, the greet function has a single parameter name. By assigning 'Anonymous' as the default value in the function signature name = 'Anonymous', the function will use the default value if no argument is passed or if the argument is undefined. If an argument is provided, it will override the default value.

When the greet function is called without an argument, it uses the default parameter value 'Anonymous' and outputs "Hello, Anonymous!". When called with the argument 'John', it uses the provided value and outputs "Hello, John!".!
In the above code, the greet function has a single parameter name. By assigning 'Anonymous' as the default value in the function signature name = 'Anonymous', the function will use the default value if no argument is passed or if the argument is undefined. If an argument is provided, it will override the default value.
Default parameter values provide flexibility and convenience in defining function parameters. They help avoid explicit checks for undefined and simplify the handling of missing or optional arguments in function calls.






Q.10 What is the purpose of the spread operator (...) in ES6?

The spread operator (...), introduced in ECMAScript 6 (ES6), is a powerful feature that allows you to spread the elements of an iterable (like an array or a string) into individual elements. The spread operator can be used in various contexts and serves multiple purposes:

Array/Object Destructuring:
The spread operator can be used to destructure elements from an array or properties from an object into individual variables.
const numbers = [1, 2, 3];
const [first, ...rest] = numbers;

console.log(first); // Output: 1
console.log(rest); // Output: [2, 3]
In this example, the spread operator is used to assign the first element of the numbers array to the first variable, and the remaining elements are spread into the rest array.

Array/Object Literal Expansion:
The spread operator can be used to expand the elements of an array or the properties of an object within a new array or object literal.
javascript
Copy code
const numbers = [4, 5, 6];
const combined = [1, 2, 3, ...numbers];

console.log(combined); // Output: [1, 2, 3, 4, 5, 6]
Here, the spread operator is used to expand the numbers array within the combined array literal, resulting in a new array with all the elements combined.

Function Arguments:
The spread operator can be used to pass an array as individual arguments to a function.
function sum(a, b, c) {
  return a + b + c;
}



